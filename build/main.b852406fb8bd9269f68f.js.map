{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"kHAAA,iBAGA,MAAMA,EAAQC,GACH,IAAIC,QAAQC,IACfC,WAAW,IAAMD,EAAQF,GAAKA,KAIhCI,EAASC,GAAQC,QAAQC,IAAK,kBAAiBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAKjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KACjC,MAAMC,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG/D,OAAOhB,QAAQC,QAAQa,IAGnBG,EAAUH,GAAgBT,QAAQa,MAAMJ,GAE9CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAMrC,MAIME,EAAmBC,IACrB,MAAMtB,GALyBuB,EAKS,IALJC,EAKS,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADtB,IAACA,EAAKC,EAOpC,OAAO,IAAItB,QAAQ,CAACC,EAASyB,KAEzBxB,WAAW,KACYqB,KAAKE,SAAW,GAE/BxB,EAAQ,CAAC0B,GAAIP,EAAYO,GAAIvB,KAAMN,IAEnC4B,EAAON,EAAYO,KAExB7B,MAIL8B,EAAa,EAAED,KAAIvB,WACrBC,QAAQC,IAAK,eAAcqB,kBAAmBvB,QAG5CyB,EAAWF,IACbtB,QAAQyB,KAAM,gCAA+BH,+BAGjDR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,K","file":"main.b852406fb8bd9269f68f.js","sourcesContent":["import './styles.css';\n// Задание 1\n\nconst delay = ms => {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(ms), ms);\n      });\n  };\n  \nconst logger = time => console.log(`Resolved after ${time}ms`);\n  \n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\n\n  \n// Задание 2\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n  \n  const toggleUserState = (allUsers, userName) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n  \n    return Promise.resolve(updatedUsers);\n  };\n  \n  const logger2 = updatedUsers => console.table(updatedUsers);\n\n  toggleUserState(users, 'Mango').then(logger2);\n  toggleUserState(users, 'Lux').then(logger2);\n\n\n\n//Задание 3\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n    \n    return new Promise((resolve, reject) => {\n        \n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3; \n            if (canProcess) {\n                resolve({id: transaction.id, time: delay});\n            } else {\n                reject(transaction.id);\n            };\n        }, delay);\n    });\n}\n  \nconst logSuccess = ({id, time}) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n}\n  \nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}